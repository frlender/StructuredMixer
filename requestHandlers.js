// Generated by CoffeeScript 1.7.1
(function() {
  var bMap, combinations, computeSchedule, fs, i, idx2name, j, key, members, n, pickCount, saveInfo, schedule, us, val, _i, _j, _ref, _ref1;

  us = require('underscore');

  fs = require('fs');

  members = fs.readFileSync('data/records.json');

  members = JSON.parse(members.toString());

  saveInfo = function() {
    return fs.writeFile('data/records.json', JSON.stringify(members));
  };

  setInterval(saveInfo, 300000);

  pickCount = 3;

  n = Object.keys(members).length;

  combinations = [];

  for (i = _i = 1, _ref = n - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
    for (j = _j = _ref1 = i + 1; _ref1 <= n ? _j <= n : _j >= n; j = _ref1 <= n ? ++_j : --_j) {
      if (j <= n) {
        combinations.push(JSON.stringify([i, j]));
      }
    }
  }

  idx2name = {};

  for (key in members) {
    val = members[key];
    idx2name[val.idx] = key;
  }

  bMap = function(arr) {
    var e, map, _k, _len;
    map = {};
    for (_k = 0, _len = arr.length; _k < _len; _k++) {
      e = arr[_k];
      map[e] = false;
    }
    return map;
  };

  computeSchedule = function() {
    var count, mutuals, nones, orderPairSet, pair, pairCount, pairSet, pairSortStr, pairUsed, pairs, person, pickPerson, ref, result, schedules, section, sectionPairs, unilaterals;
    pairs = [];
    for (person in members) {
      val = members[person];
      if (val.pick.length > 0) {
        pairs = pairs.concat((function() {
          var _k, _len, _ref2, _results;
          _ref2 = val.pick;
          _results = [];
          for (_k = 0, _len = _ref2.length; _k < _len; _k++) {
            pickPerson = _ref2[_k];
            _results.push([val.idx, members[pickPerson].idx]);
          }
          return _results;
        })());
      }
    }
    pairSortStr = us.map(pairs, function(e) {
      return JSON.stringify(us.sortBy(e, us.identity));
    });
    pairCount = us.countBy(pairSortStr);
    mutuals = [];
    for (pair in pairCount) {
      count = pairCount[pair];
      if (count > 1) {
        mutuals.push(pair);
      }
    }
    pairSet = us.keys(pairCount);
    unilaterals = us.difference(pairSet, mutuals);
    nones = us.difference(combinations, pairSet);
    orderPairSet = us.shuffle(mutuals).concat(us.shuffle(unilaterals)).concat(us.shuffle(nones));
    ref = us.map(orderPairSet, function(e) {
      return JSON.parse(e);
    });
    sectionPairs = function(orderPairSet, ref, pairUsed) {
      var currentPair, currentPairStr, elementUsed, picked, _k, _results;
      elementUsed = bMap((function() {
        _results = [];
        for (var _k = 1; 1 <= n ? _k <= n : _k >= n; 1 <= n ? _k++ : _k--){ _results.push(_k); }
        return _results;
      }).apply(this));
      picked = [];
      i = 0;
      while (picked.length < n / 2 && i < orderPairSet.length) {
        currentPair = ref[i];
        currentPairStr = orderPairSet[i];
        if (!pairUsed[currentPairStr] && !elementUsed[currentPair[0]] && !elementUsed[currentPair[1]]) {
          pairUsed[currentPairStr] = true;
          elementUsed[currentPair[0]] = true;
          elementUsed[currentPair[1]] = true;
          picked.push(currentPair);
        }
        i++;
      }
      if (picked.length < n / 2) {
        return false;
      } else {
        return {
          pairUsed: pairUsed,
          picked: picked
        };
      }
    };
    schedules = [];
    pairUsed = bMap(orderPairSet);
    while (schedules.length < pickCount) {
      result = sectionPairs(orderPairSet, ref, us.clone(pairUsed));
      if (result === false) {
        orderPairSet = us.shuffle(mutuals).concat(us.shuffle(unilaterals)).concat(us.shuffle(nones));
        ref = us.map(orderPairSet, function(e) {
          return JSON.parse(e);
        });
      } else {
        schedules.push(result.picked);
        pairUsed = result.pairUsed;
      }
    }
    schedules = (function() {
      var _k, _len, _results;
      _results = [];
      for (_k = 0, _len = schedules.length; _k < _len; _k++) {
        section = schedules[_k];
        _results.push((function() {
          var _l, _len1, _results1;
          _results1 = [];
          for (_l = 0, _len1 = section.length; _l < _len1; _l++) {
            pair = section[_l];
            _results1.push([idx2name[pair[0]], idx2name[pair[1]]]);
          }
          return _results1;
        })());
      }
      return _results;
    })();
    return schedules;
  };

  schedule = computeSchedule();

  exports.initialize = function(req, res) {
    var names, person, pickedCount, totalCount;
    pickedCount = 0;
    names = (function() {
      var _results;
      _results = [];
      for (person in members) {
        val = members[person];
        if (val.pick.length > 0) {
          pickedCount++;
        }
        _results.push(person);
      }
      return _results;
    })();
    if (us.contains(names, 'null')) {
      totalCount = n - 1;
    }
    names = us.filter(names, function(e) {
      return e !== 'null';
    });
    return res.send({
      names: names,
      pickedCount: pickedCount,
      totalCount: totalCount
    });
  };

  exports.submitPreference = function(req, res) {
    var previousPick, source, target;
    source = req.param('source');
    target = JSON.parse(req.param('target'));
    previousPick = members[source].pick;
    if (us.intersection(previousPick, target).length !== pickCount) {
      members[source].pick = target;
      schedule = computeSchedule();
    }
    return res.send('done');
  };

  exports.getSchedule = function(req, res) {
    var filteredSchedule;
    filteredSchedule = us.map(schedule, function(session) {
      return us.filter(session, function(pair) {
        return !us.contains(pair, 'null');
      });
    });
    return res.send(filteredSchedule);
  };

}).call(this);
