// Generated by CoffeeScript 1.7.1
(function() {
  var bMap, fs, n, pickCount, us;

  fs = require('fs');

  us = require('underscore');

  pickCount = 3;

  n = 12;

  bMap = function(arr) {
    var e, map, _i, _len;
    map = {};
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      e = arr[_i];
      map[e] = false;
    }
    return map;
  };

  fs.readFile('test2.json', function(err, data) {
    var currentPair, currentPairStr, elementUsed, i, k, orderPairSet, pairUsed, picked, ref, schedules;
    orderPairSet = JSON.parse(data.toString());
    ref = us.map(orderPairSet, function(e) {
      return JSON.parse(e);
    });
    pairUsed = bMap(orderPairSet);
    return schedules = (function() {
      var _i, _j, _results, _results1;
      _results = [];
      for (k = _i = 1; 1 <= pickCount ? _i <= pickCount : _i >= pickCount; k = 1 <= pickCount ? ++_i : --_i) {
        elementUsed = bMap((function() {
          _results1 = [];
          for (var _j = 1; 1 <= n ? _j <= n : _j >= n; 1 <= n ? _j++ : _j--){ _results1.push(_j); }
          return _results1;
        }).apply(this));
        picked = [];
        i = 0;
        while (picked.length < n / 2) {
          currentPair = ref[i];
          currentPairStr = orderPairSet[i];
          if (!pairUsed[currentPairStr] && !elementUsed[currentPair[0]] && !elementUsed[currentPair[1]]) {
            pairUsed[currentPairStr] = true;
            elementUsed[currentPair[0]] = true;
            elementUsed[currentPair[1]] = true;
            console.log(currentPair);
            picked.push(currentPair);
          }
          i++;
        }
        console.log('good');
        _results.push(picked);
      }
      return _results;
    })();
  });

}).call(this);
